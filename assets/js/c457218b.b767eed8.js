"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[5531],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),k=l(n),m=i,h=k["".concat(d,".").concat(m)]||k[m]||p[m]||r;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},4010:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var a=n(3117),i=n(102),r=(n(7294),n(3905)),s=["components"],o={sidebar_position:2},d="Methods",l={unversionedId:"reference/sdk/methods",id:"reference/sdk/methods",title:"Methods",description:"Comptroller",source:"@site/docs/reference/sdk/methods.md",sourceDirName:"reference/sdk",slug:"/reference/sdk/methods",permalink:"/docs/reference/sdk/methods",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebarReference",previous:{title:"Getting Started",permalink:"/docs/reference/sdk/getting_started"},next:{title:"Types",permalink:"/docs/reference/sdk/types"}},c={},p=[{value:"Comptroller",id:"comptroller",level:2},{value:"Instantiation",id:"instantiation",level:3},{value:"<code>getSupplierAprs</code>",id:"getsupplieraprs",level:3},{value:"Market",id:"market",level:2},{value:"Instantiation",id:"instantiation-1",level:3},{value:"<code>find</code>",id:"find",level:3},{value:"OneClickWrapper",id:"oneclickwrapper",level:2},{value:"Instantiation",id:"instantiation-2",level:3},{value:"<code>apr</code>",id:"apr",level:3},{value:"<code>send</code>",id:"send",level:3},{value:"<code>simulate</code>",id:"simulate",level:3},{value:"OT",id:"ot",level:2},{value:"Instantiation",id:"instantiation-3",level:3},{value:"<code>find</code>",id:"find-1",level:3},{value:"<code>fetchRewards</code>",id:"fetchrewards",level:3},{value:"<code>hasRewardsByForgeId</code>",id:"hasrewardsbyforgeid",level:3},{value:"<code>hasRewards</code>",id:"hasrewards",level:3},{value:"<code>yieldContract</code>",id:"yieldcontract",level:3},{value:"PendleMarket",id:"pendlemarket",level:2},{value:"Instantiation",id:"instantiation-4",level:3},{value:"<code>addDualDetails</code>",id:"adddualdetails",level:3},{value:"<code>addDual</code>",id:"adddual",level:3},{value:"<code>addSingleDetails</code>",id:"addsingledetails",level:3},{value:"<code>addSingle</code>",id:"addsingle",level:3},{value:"<code>fetchInterests</code>",id:"fetchinterests",level:3},{value:"<code>find</code>",id:"find-2",level:3},{value:"<code>getLiquidityTransactions</code>",id:"getliquiditytransactions",level:3},{value:"<code>getLPPriceBigNumber</code>",id:"getlppricebignumber",level:3},{value:"<code>getMarketFactoryId</code>",id:"getmarketfactoryid",level:3},{value:"<code>getSwapFeeApr</code>",id:"getswapfeeapr",level:3},{value:"<code>getYTPrice</code>",id:"getytprice",level:3},{value:"<code>getSwapTransactions</code>",id:"getswaptransactions",level:3},{value:"<code>swapExactInDetails</code>",id:"swapexactindetails",level:3},{value:"<code>swapExactIn</code>",id:"swapexactin",level:3},{value:"<code>swapExactOutDetails</code>",id:"swapexactoutdetails",level:3},{value:"<code>swapExactOut</code>",id:"swapexactout",level:3},{value:"<code>readMarketDetails</code>",id:"readmarketdetails",level:3},{value:"<code>removeDualDetails</code>",id:"removedualdetails",level:3},{value:"<code>removeDual</code>",id:"removedual",level:3},{value:"<code>removeSingleDetails</code>",id:"removesingledetails",level:3},{value:"<code>removeSingle</code>",id:"removesingle",level:3},{value:"<code>yieldContract</code>",id:"yieldcontract-1",level:3},{value:"MasterChef",id:"masterchef",level:2},{value:"Instantiation",id:"instantiation-5",level:3},{value:"<code>getRewardsAprs</code>",id:"getrewardsaprs",level:3},{value:"StakingPool",id:"stakingpool",level:2},{value:"Instantiation",id:"instantiation-6",level:3},{value:"<code>find</code>",id:"find-3",level:3},{value:"<code>balanceOf</code>",id:"balanceof",level:3},{value:"<code>rewardAprs</code>",id:"rewardaprs",level:3},{value:"<code>stake</code>",id:"stake",level:3},{value:"<code>unstake</code>",id:"unstake",level:3},{value:"Token",id:"token",level:2},{value:"Instantiation",id:"instantiation-7",level:3},{value:"<code>find</code>",id:"find-4",level:3},{value:"TokenAmount",id:"tokenamount",level:2},{value:"Instantiation",id:"instantiation-8",level:3},{value:"<code>formattedAmount</code>",id:"formattedamount",level:3},{value:"<code>rawAmount</code>",id:"rawamount",level:3},{value:"<code>balancesOf</code>",id:"balancesof",level:3},{value:"TokenDistributor",id:"tokendistributor",level:2},{value:"Instantiation",id:"instantiation-9",level:3},{value:"<code>fetchClaimableRewards</code>",id:"fetchclaimablerewards",level:3},{value:"YieldContract",id:"yieldcontract-2",level:2},{value:"Instantiation",id:"instantiation-10",level:3},{value:"<code>getPrincipalPerYT</code>",id:"getprincipalperyt",level:3},{value:"<code>getMintTransactions</code>",id:"getminttransactions",level:3},{value:"<code>getRedeemTransactions</code>",id:"getredeemtransactions",level:3},{value:"<code>mint</code>",id:"mint",level:3},{value:"<code>mintDetails</code>",id:"mintdetails",level:3},{value:"<code>redeem</code>",id:"redeem",level:3},{value:"<code>redeemDetails</code>",id:"redeemdetails",level:3},{value:"<code>useCompoundMath</code>",id:"usecompoundmath",level:3},{value:"YT",id:"yt",level:2},{value:"Instantiation",id:"instantiation-11",level:3},{value:"<code>find</code>",id:"find-5",level:3},{value:"<code>yieldContract</code>",id:"yieldcontract-3",level:3},{value:"<code>fetchInterests</code>",id:"fetchinterests-1",level:3}],k={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"methods"},"Methods"),(0,r.kt)("h2",{id:"comptroller"},"Comptroller"),(0,r.kt)("h3",{id:"instantiation"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Comptroller } from '@pendle/sdk';\n\nconst address: string = '0x...';\nconst protocol: string = 'compound';\n\nconst comptroller: Comptroller = new Comptroller(address, protocol);\n")),(0,r.kt)("h3",{id:"getsupplieraprs"},(0,r.kt)("inlineCode",{parentName:"h3"},"getSupplierAprs")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Comptroller.getSupplierAprs( qiOrCToken: ",(0,r.kt)("a",{parentName:"strong",href:"#token"},"Token")," ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#aprinfo"},"AprInfo"),"[]>"),(0,r.kt)("br",null),"\n","\u2003","Fetch the APR of a given yield bearing protocol token."),(0,r.kt)("h2",{id:"market"},"Market"),(0,r.kt)("h3",{id:"instantiation-1"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Market } from '@pendle/sdk';\n\nconst address: string = '0x...';\n\nconst market: Market = Market.find(address);\n")),(0,r.kt)("h3",{id:"find"},(0,r.kt)("inlineCode",{parentName:"h3"},"find")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Market.find( address: string ","[, chainId: number ]"," ) \u21d2 Market"),(0,r.kt)("br",null),"\n","\u2003","Find the Market given the address and creates an instance."),(0,r.kt)("h2",{id:"oneclickwrapper"},"OneClickWrapper"),(0,r.kt)("h3",{id:"instantiation-2"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { OneClickWrapper, YieldContract, Token } from '@pendle/sdk';\n\nconst tokenAddress: string = '0x...';\nconst forgeId: string = '0x...';\nconst expiry: number: 1640995200;\nconst chainId: number: 1;\n\nconst underlyingAsset: Token = Token.find(tokenAddress, chainId, expiry);\nconst yieldContract: YieldContract = new YieldContract(forgeId, underlyingAsset, expiry, chainId);\nconst oneClickWrapper: OneClickWrapper = new OneClickWrapper(yieldContract);\n")),(0,r.kt)("h3",{id:"apr"},(0,r.kt)("inlineCode",{parentName:"h3"},"apr")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"OneClickWrapper.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).apr( action: ",(0,r.kt)("a",{parentName:"strong",href:"types#action"},"Action")," ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#wrapperaprinfo"},"WrapperAPRInfo"),">"),(0,r.kt)("br",null),"\n","\u2003","Fetches the APR for a particular zap function."),(0,r.kt)("h3",{id:"send"},(0,r.kt)("inlineCode",{parentName:"h3"},"send")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"OneClickWrapper.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).send( action: ",(0,r.kt)("a",{parentName:"strong",href:"types#action"},"Action"),", sTxns: ",(0,r.kt)("a",{parentName:"strong",href:"types#transaction"},"Transaction"),"[], slippage: number ) \u21d2 Promise<providers",".","TransactionResponse>"),(0,r.kt)("br",null),"\n","\u2003","Performs the actual zap by broadcasting a tx."),(0,r.kt)("h3",{id:"simulate"},(0,r.kt)("inlineCode",{parentName:"h3"},"simulate")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"OneClickWrapper.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).simulate( action: ",(0,r.kt)("a",{parentName:"strong",href:"types#action"},"Action"),", inputTokenAmount: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount"),", slippage: number ","[ , walletAddress: string ]"," ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#simulationdetails"},"SimulationDetails"),">"),(0,r.kt)("br",null),"\n","\u2003","Simulate a zap and fetch the details such as the resulting pool shares."),(0,r.kt)("h2",{id:"ot"},"OT"),(0,r.kt)("h3",{id:"instantiation-3"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Ot } from '@pendle/sdk';\n\nconst otAddress: string = '0x...';\nconst chainId: number = 1;\n\nconst ot: Ot = Ot.find(otAddress, chainId);\n")),(0,r.kt)("h3",{id:"find-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"find")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ot.find( address: string ","[ , chainId: number ]"," ) \u21d2 Ot"),(0,r.kt)("br",null),"\n","\u2003","Gets the OT (ownership token) and creates an instance."),(0,r.kt)("h3",{id:"fetchrewards"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchRewards")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ot.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).fetchRewards( userAddress: string ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#otreward"},"OtReward"),"[]>"),(0,r.kt)("br",null),"\n","\u2003","Fetches the accrued rewards (such as stkAave, COMP) from the OT for a user."),(0,r.kt)("h3",{id:"hasrewardsbyforgeid"},(0,r.kt)("inlineCode",{parentName:"h3"},"hasRewardsByForgeId")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ot.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).hasRewardsByForgeId( forgeId: string ) \u21d2 boolean"),(0,r.kt)("br",null),"\n","\u2003","Returns a bool indicating if a user has rewards by forgeId."),(0,r.kt)("h3",{id:"hasrewards"},(0,r.kt)("inlineCode",{parentName:"h3"},"hasRewards")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ot.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).hasRewards() \u21d2 boolean"),(0,r.kt)("br",null),"\n","\u2003","Returns a bool indicating if a user has rewards by forgeId for a particular instance of an OT."),(0,r.kt)("h3",{id:"yieldcontract"},(0,r.kt)("inlineCode",{parentName:"h3"},"yieldContract")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ot.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).yieldContract( ","[ chainId: number ]"," ) \u21d2 ",(0,r.kt)("a",{parentName:"strong",href:"#yieldcontract"},"YieldContract")),(0,r.kt)("br",null),"\n","\u2003","Gets an instance of the underlying yield token contract."),(0,r.kt)("h2",{id:"pendlemarket"},"PendleMarket"),(0,r.kt)("h3",{id:"instantiation-4"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { PendleMarket } from '@pendle/sdk';\n\nconst address: string = '0x...';\n\nconst pendleMarket: PendleMarket = PendleMarket.find(address);\n")),(0,r.kt)("h3",{id:"adddualdetails"},(0,r.kt)("inlineCode",{parentName:"h3"},"addDualDetails")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).addDualDetails( tokenAmount: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount"),", _: number ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#adddualliquiditydetails"},"AddDualLiquidityDetails"),">"),(0,r.kt)("br",null),"\n","\u2003","Fetches the adding of liquidity details for 2 assets, such as token amount and share of pool. 2nd arg is unused as we only fetch details here."),(0,r.kt)("h3",{id:"adddual"},(0,r.kt)("inlineCode",{parentName:"h3"},"addDual")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).addDual( tokenAmounts: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount"),"[], slippage: number ) \u21d2 Promise<providers",".","TransactionResponse>"),(0,r.kt)("br",null),"\n","\u2003","Broadcasts a tx to add liquidity for 2 assets."),(0,r.kt)("h3",{id:"addsingledetails"},(0,r.kt)("inlineCode",{parentName:"h3"},"addSingleDetails")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).addSingleDetails( tokenAmount: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount")," ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#addsingleliquiditydetails"},"AddSingleLiquidityDetails"),">"),(0,r.kt)("br",null),"\n","\u2003","Fetches the adding of liquidity details for 1 asset of the pair, such as token amount and share of pool."),(0,r.kt)("h3",{id:"addsingle"},(0,r.kt)("inlineCode",{parentName:"h3"},"addSingle")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).addSingle( tokenAmount: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount"),", slippage: number ) \u21d2 Promise<providers",".","TransactionResponse>"),(0,r.kt)("br",null),"\n","\u2003","Broadcasts a tx to add liquidity for 1 asset of the pair."),(0,r.kt)("h3",{id:"fetchinterests"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchInterests")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).fetchInterests( userAddress: string ) \u21d2 Promise<YtOrMarketInterest[]>"),(0,r.kt)("br",null),"\n","\u2003","Fetches the accrued interests from the YT in the market for a user."),(0,r.kt)("h3",{id:"find-2"},(0,r.kt)("inlineCode",{parentName:"h3"},"find")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.find( address: string ","[, chainId: number ]"," ) \u21d2 PendleMarket"),(0,r.kt)("br",null),"\n","\u2003","Find the PendleMarket given the address and creates an instance."),(0,r.kt)("h3",{id:"getliquiditytransactions"},(0,r.kt)("inlineCode",{parentName:"h3"},"getLiquidityTransactions")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).getLiquidityTransactions( query: ",(0,r.kt)("a",{parentName:"strong",href:"types#pendleammquery"},"PendleAmmQuery")," ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#transaction"},"TRANSACTION"),"[]>"),(0,r.kt)("br",null),"\n","\u2003","Fetches the add/remove liquidity transactions of the signer in the market."),(0,r.kt)("h3",{id:"getlppricebignumber"},(0,r.kt)("inlineCode",{parentName:"h3"},"getLPPriceBigNumber")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).getLPPriceBigNumber() \u21d2 Promise<BigNumber",">"),(0,r.kt)("br",null),"\n","\u2003","Fetches the price of the LP token of a market."),(0,r.kt)("h3",{id:"getmarketfactoryid"},(0,r.kt)("inlineCode",{parentName:"h3"},"getMarketFactoryId")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).getMarketFactoryId() \u21d2 Promise<string",">"),(0,r.kt)("br",null),"\n","\u2003","Fetches the market factory ID for a market."),(0,r.kt)("h3",{id:"getswapfeeapr"},(0,r.kt)("inlineCode",{parentName:"h3"},"getSwapFeeApr")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).getSwapFeeApr() \u21d2 Promise<string",">"),(0,r.kt)("br",null),"\n","\u2003","Fetches the swap fee APR for a market."),(0,r.kt)("h3",{id:"getytprice"},(0,r.kt)("inlineCode",{parentName:"h3"},"getYTPrice")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).getYTPrice( marketReserves: ",(0,r.kt)("a",{parentName:"strong",href:"types#marketreservesraw"},"MarketReservesRaw")," | undefined ) \u21d2 Promise<string",">"),(0,r.kt)("br",null),"\n","\u2003","Fetches the YT price in a market."),(0,r.kt)("h3",{id:"getswaptransactions"},(0,r.kt)("inlineCode",{parentName:"h3"},"getSwapTransactions")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).getSwapTransactions( query: ",(0,r.kt)("a",{parentName:"strong",href:"types#pendleammquery"},"PendleAmmQuery")," ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#transaction"},"TRANSACTION"),"[]>"),(0,r.kt)("br",null),"\n","\u2003","Fetches the swap transactions of the signer in the market."),(0,r.kt)("h3",{id:"swapexactindetails"},(0,r.kt)("inlineCode",{parentName:"h3"},"swapExactInDetails")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).swapExactInDetails( inTokenAmount: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount"),", slippage: number ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#swapdetails"},"SwapDetails"),">"),(0,r.kt)("br",null),"\n","\u2003","Fetches the exact-in swapping details, such as the source and destination token, amounts, and price impact."),(0,r.kt)("h3",{id:"swapexactin"},(0,r.kt)("inlineCode",{parentName:"h3"},"swapExactIn")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).swapExactInDetails( inTokenAmount: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount"),", slippage: number ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#swapdetails"},"SwapDetails"),">"),(0,r.kt)("br",null),"\n","\u2003","Broadcasts a tx to perform an exact-in-amount swap."),(0,r.kt)("h3",{id:"swapexactoutdetails"},(0,r.kt)("inlineCode",{parentName:"h3"},"swapExactOutDetails")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).swapExactOutDetails( inTokenAmount: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount"),", slippage: number ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#swapdetails"},"SwapDetails"),">"),(0,r.kt)("br",null),"\n","\u2003","Fetches the exact-out swapping details, such as the source and destination token, amounts, and price impact."),(0,r.kt)("h3",{id:"swapexactout"},(0,r.kt)("inlineCode",{parentName:"h3"},"swapExactOut")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).swapExactOut( inTokenAmount: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount"),", slippage: number ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#swapdetails"},"SwapDetails"),">"),(0,r.kt)("br",null),"\n","\u2003","Broadcasts a tx to perform an exact-out-amount swap."),(0,r.kt)("h3",{id:"readmarketdetails"},(0,r.kt)("inlineCode",{parentName:"h3"},"readMarketDetails")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).readMarketDetails() \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#marketdetails"},"MarketDetails"),">"),(0,r.kt)("br",null),"\n","\u2003","Fetches market details such as reserves, liquidity, and volume."),(0,r.kt)("h3",{id:"removedualdetails"},(0,r.kt)("inlineCode",{parentName:"h3"},"removeDualDetails")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).removeDualDetails( percentage: number, _: number ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#removedualliquiditydetails"},"RemoveDualLiquidityDetails"),">"),(0,r.kt)("br",null),"\n","\u2003","Fetches the removing of liquidity details for 2 assets, such as token amount and share of pool. 2nd arg is unused as we only fetch details here."),(0,r.kt)("h3",{id:"removedual"},(0,r.kt)("inlineCode",{parentName:"h3"},"removeDual")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).removeDual( tokenAmounts: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount"),"[], slippage: number ) \u21d2 Promise<providers",".","TransactionResponse>"),(0,r.kt)("br",null),"\n","\u2003","Broadcasts a tx to remove liquidity for 2 assets."),(0,r.kt)("h3",{id:"removesingledetails"},(0,r.kt)("inlineCode",{parentName:"h3"},"removeSingleDetails")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).removeSingleDetails( percentage: number, outToken: Token, _: number ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#removesingleliquiditydetails"},"RemoveSingleLiquidityDetails"),">"),(0,r.kt)("br",null),"\n","\u2003","Fetches the removing of liquidity details for 1 asset of the pair, such as token amount. 3rd arg is unused as we only fetch details here."),(0,r.kt)("h3",{id:"removesingle"},(0,r.kt)("inlineCode",{parentName:"h3"},"removeSingle")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).removeSingle( percentage: number, outToken: Token, slippage: number ) \u21d2 Promise<providers",".","TransactionResponse>"),(0,r.kt)("br",null),"\n","\u2003","Broadcasts a tx to remove liquidity for 1 asset of the pair."),(0,r.kt)("h3",{id:"yieldcontract-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"yieldContract")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PendleMarket.yieldContract( ","[ chainId: number ]"," ) \u21d2 ",(0,r.kt)("a",{parentName:"strong",href:"#yieldcontract-1"},"YieldContract")),(0,r.kt)("br",null),"\n","\u2003","Find the PendleMarket given the address and creates an instance."),(0,r.kt)("h2",{id:"masterchef"},"MasterChef"),(0,r.kt)("h3",{id:"instantiation-5"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { MasterChef } from '@pendle/sdk';\n")),(0,r.kt)("h3",{id:"getrewardsaprs"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRewardsAprs")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"MasterChef.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).getRewardsAprs( pid: number ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#aprinfo"},"AprInfo"),"[]>"),(0,r.kt)("br",null),"\n","\u2003","Gets the reward APRs for a given PID from the masterchef contracts (e.g. Sushi, TraderJoe)."),(0,r.kt)("h2",{id:"stakingpool"},"StakingPool"),(0,r.kt)("h3",{id:"instantiation-6"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { StakingPool } from '@pendle/sdk';\n\nconst address: string = '0x...';\nconst inputTokenAddress: string = '0x...';\nconst chainId: number = 1;\n\nconst stakingPool: StakingPool = StakingPool.find(address, inputTokenAddress, chainid);\n")),(0,r.kt)("h3",{id:"find-3"},(0,r.kt)("inlineCode",{parentName:"h3"},"find")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"StakingPool.find( address: string, inputTokenAddress: string, chainId?: number ) \u21d2 StakingPool"),(0,r.kt)("br",null),"\n","\u2003","Find the StakingPool given the address and input token address, then creates an instance."),(0,r.kt)("h3",{id:"balanceof"},(0,r.kt)("inlineCode",{parentName:"h3"},"balanceOf")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"StakingPool.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).balanceOf( address: string ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#stakedamount"},"StakedAmount"),">"),(0,r.kt)("br",null),"\n","\u2003","Gets the staked amount of a user in the masterchef."),(0,r.kt)("h3",{id:"rewardaprs"},(0,r.kt)("inlineCode",{parentName:"h3"},"rewardAprs")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"StakingPool.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).rewardAprs() \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#aprinfo"},"AprInfo"),"[]>"),(0,r.kt)("br",null),"\n","\u2003","Gets the reward APRs from the masterchef."),(0,r.kt)("h3",{id:"stake"},(0,r.kt)("inlineCode",{parentName:"h3"},"stake")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"StakingPool.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).stake( amount: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount")," ) \u21d2 Promise<providers",".","TransactionResponse>"),(0,r.kt)("br",null),"\n","\u2003","Broadcasts a tx to stake into the masterchef."),(0,r.kt)("h3",{id:"unstake"},(0,r.kt)("inlineCode",{parentName:"h3"},"unstake")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"StakingPool.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).unstake( amount: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount")," ) \u21d2 Promise<providers",".","TransactionResponse>"),(0,r.kt)("br",null),"\n","\u2003","Broadcasts a tx to unstake from the masterchef."),(0,r.kt)("h2",{id:"token"},"Token"),(0,r.kt)("h3",{id:"instantiation-7"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Token } from '@pendle/sdk';\n\nconst address: string = '0x...';\n\nconst token: Token = Token.find(address);\n")),(0,r.kt)("h3",{id:"find-4"},(0,r.kt)("inlineCode",{parentName:"h3"},"find")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Token.find( address: string [ , chainId: number ,  ","[, expiry: number ]"," ) \u21d2 Token"),(0,r.kt)("br",null),"\n","\u2003","Find the Token given the params and creates an instance."),(0,r.kt)("h2",{id:"tokenamount"},"TokenAmount"),(0,r.kt)("h3",{id:"instantiation-8"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Token, TokenAmount } from '@pendle/sdk';\n\nconst tokenAddress: string = '0x...';\nconst token: Token = Token.find(tokenAddress);\nconst amount: string = '100';\n\nconst tokenAmount: TokenAmount = new TokenAmount(token, amount);\n")),(0,r.kt)("h3",{id:"formattedamount"},(0,r.kt)("inlineCode",{parentName:"h3"},"formattedAmount")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"tokenAmount.formattedAmount() \u21d2 string"),(0,r.kt)("br",null),"\n","\u2003","Formats the token wei amount to human readable format."),(0,r.kt)("h3",{id:"rawamount"},(0,r.kt)("inlineCode",{parentName:"h3"},"rawAmount")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"tokenAmount.rawAmount() \u21d2 string"),(0,r.kt)("br",null),"\n","\u2003","Returns the token wei amount of the token."),(0,r.kt)("h3",{id:"balancesof"},(0,r.kt)("inlineCode",{parentName:"h3"},"balancesOf")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"tokenAmount.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).balancesOf( { user, tokens }: { user: string, tokens: ",(0,r.kt)("a",{parentName:"strong",href:"#token"},"Token"),"[] } ) \u21d2 Promise<TokenAmount[]>"),(0,r.kt)("br",null),"\n","\u2003","Returns the token balance of the passed in user address."),(0,r.kt)("h2",{id:"tokendistributor"},"TokenDistributor"),(0,r.kt)("h3",{id:"instantiation-9"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { TokenDistributor } from '@pendle/sdk';\n")),(0,r.kt)("h3",{id:"fetchclaimablerewards"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchClaimableRewards")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"TokenDistributor.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).fetchClaimableRewards( tokens: Token[], userAddress: string} ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount"),"[]>"),(0,r.kt)("br",null),"\n","\u2003","Fetches the claimable reward amounts of the provider signer."),(0,r.kt)("h2",{id:"yieldcontract-2"},"YieldContract"),(0,r.kt)("h3",{id:"instantiation-10"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { YieldContract } from '@pendle/sdk';\n\nconst ytAddress: string = '0x...';\nconst chainId: number = 1;\n\nconst yt: Yt = Yt.find(ytAddress, chainId);\nconst yieldContract: YieldContract = Yt.yieldContract();\n")),(0,r.kt)("h3",{id:"getprincipalperyt"},(0,r.kt)("inlineCode",{parentName:"h3"},"getPrincipalPerYT")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"yieldContract.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).getPrincipalPerYT() \u21d2 Promise<TokenAmount",">"),(0,r.kt)("br",null),"\n","\u2003","Gets the amount of underlying principal tokens per amount of YT held."),(0,r.kt)("h3",{id:"getminttransactions"},(0,r.kt)("inlineCode",{parentName:"h3"},"getMintTransactions")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"yieldContract.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).getMintTransactions( query: ",(0,r.kt)("a",{parentName:"strong",href:"types#forgequery"},"ForgeQuery")," ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#transaction"},"TRANSACTION"),"[]>"),(0,r.kt)("br",null),"\n","\u2003","Fetches mint transactions for signer given passed query."),(0,r.kt)("h3",{id:"getredeemtransactions"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRedeemTransactions")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"yieldContract.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).getRedeemTransactions( query: ",(0,r.kt)("a",{parentName:"strong",href:"types#forgequery"},"ForgeQuery")," ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#transaction"},"TRANSACTION"),"[]>"),(0,r.kt)("br",null),"\n","\u2003","Fetches redeem transactions for signer given passed query."),(0,r.kt)("h3",{id:"mint"},(0,r.kt)("inlineCode",{parentName:"h3"},"mint")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"yieldContract.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).mint( toMint: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount")," ) \u21d2 Promise<providers",".","TransactionResponse>"),(0,r.kt)("br",null),"\n","\u2003","Broadcasts a tx that mints OT and YT based on toMint amount passed."),(0,r.kt)("h3",{id:"mintdetails"},(0,r.kt)("inlineCode",{parentName:"h3"},"mintDetails")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"yieldContract.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).mintDetails( toMint: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount")," ) \u21d2 Promise<TokenAmount[]>"),(0,r.kt)("br",null),"\n","\u2003","Returns the static amount of the OT and YT to be minted based on toMint amount passed. Simulates a state transition through callStatic."),(0,r.kt)("h3",{id:"redeem"},(0,r.kt)("inlineCode",{parentName:"h3"},"redeem")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"yieldContract.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).mint( toRedeem: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount")," ) \u21d2 Promise<providers",".","TransactionResponse>"),(0,r.kt)("br",null),"\n","\u2003","Broadcasts a tx that redeems the OT rewards and interests."),(0,r.kt)("h3",{id:"redeemdetails"},(0,r.kt)("inlineCode",{parentName:"h3"},"redeemDetails")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"yieldContract.redeemDetails( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).mint( amountToRedeem: ",(0,r.kt)("a",{parentName:"strong",href:"#tokenamount"},"TokenAmount"),", userAddress: string ) \u21d2 Promise<",(0,r.kt)("a",{parentName:"strong",href:"types#redeemdetails"},"RedeemDetails"),">"),(0,r.kt)("br",null),"\n","\u2003","Returns the static redeem amounts from OT rewards and interests."),(0,r.kt)("h3",{id:"usecompoundmath"},(0,r.kt)("inlineCode",{parentName:"h3"},"useCompoundMath")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"yieldContract.useCompoundMath() \u21d2 boolean"),(0,r.kt)("br",null),"\n","\u2003","Returns true if using Compound Math, otherwise false."),(0,r.kt)("h2",{id:"yt"},"YT"),(0,r.kt)("h3",{id:"instantiation-11"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Yt } from '@pendle/sdk';\n\nconst ytAddress: string = '0x...';\nconst chainId: number = 1;\n\nconst yt: Yt = Yt.find(ytAddress, chainId);\n")),(0,r.kt)("h3",{id:"find-5"},(0,r.kt)("inlineCode",{parentName:"h3"},"find")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Yt.find( address: string ","[ , chainId: number ]"," ) \u21d2 Yt"),(0,r.kt)("br",null),"\n","\u2003","Gets the YT (yield token) and creates an instance."),(0,r.kt)("h3",{id:"yieldcontract-3"},(0,r.kt)("inlineCode",{parentName:"h3"},"yieldContract")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Yt.yieldContract( ","[ chainId: number ]"," ) \u21d2 ",(0,r.kt)("a",{parentName:"strong",href:"#yieldcontract"},"YieldContract")),(0,r.kt)("br",null),"\n","\u2003","Gets an instance of the underlying yield token contract."),(0,r.kt)("h3",{id:"fetchinterests-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchInterests")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Yt.methods( chainSpecifics: ",(0,r.kt)("a",{parentName:"strong",href:"types#chainspecifics"},"ChainSpecifics")," ).fetchInterests( userAddress: string ) \u21d2 Promise<","[YtOrMarketInterest]","(types#ytormarketinterest[]>"),(0,r.kt)("br",null),"\n","\u2003","Fetches the accrued interests from the YT for a user."))}m.isMDXComponent=!0}}]);