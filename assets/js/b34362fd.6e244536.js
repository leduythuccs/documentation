"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[2512],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var k=n.createContext({}),o=function(e){var t=n.useContext(k),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=o(e.components);return n.createElement(k.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,k=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=o(a),m=r,u=c["".concat(k,".").concat(m)]||c[m]||s[m]||l;return a?n.createElement(u,i(i({ref:t},p),{},{components:a})):n.createElement(u,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var d={};for(var k in t)hasOwnProperty.call(t,k)&&(d[k]=t[k]);d.originalType=e,d.mdxType="string"==typeof e?e:r,i[1]=d;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},9416:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return k},default:function(){return m},frontMatter:function(){return d},metadata:function(){return o},toc:function(){return s}});var n=a(3117),r=a(102),l=(a(7294),a(3905)),i=["components"],d={sidebar_position:2},k="IPendleData",o={unversionedId:"reference/contracts/IPendleData",id:"reference/contracts/IPendleData",title:"IPendleData",description:"imports IPendleRouter, IPendleYieldToken, IPendlePausingManager, IPendleMarket",source:"@site/docs/reference/contracts/IPendleData.md",sourceDirName:"reference/contracts",slug:"/reference/contracts/IPendleData",permalink:"/docs/reference/contracts/IPendleData",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebarReference",previous:{title:"IPendleRouter",permalink:"/docs/reference/contracts/IPendleRouter"},next:{title:"Getting Started",permalink:"/docs/reference/sdk/getting_started"}},p={},s=[{value:"REFERENCE",id:"reference",level:2},{value:"Events",id:"events",level:3},{value:"<code>ForgeFactoryValiditySet</code>",id:"forgefactoryvalidityset",level:3},{value:"<code>TreasurySet</code>",id:"treasuryset",level:3},{value:"<code>LockParamsSet</code>",id:"lockparamsset",level:3},{value:"<code>ExpiryDivisorSet</code>",id:"expirydivisorset",level:3},{value:"<code>ForgeFeeSet</code>",id:"forgefeeset",level:3},{value:"<code>InterestUpdateRateDeltaForMarketSet</code>",id:"interestupdateratedeltaformarketset",level:3},{value:"<code>MarketFeesSet</code>",id:"marketfeesset",level:3},{value:"<code>CurveShiftBlockDeltaSet</code>",id:"curveshiftblockdeltaset",level:3},{value:"<code>NewMarketFactory</code>",id:"newmarketfactory",level:3},{value:"<code>ForgeAdded</code>",id:"forgeadded",level:3},{value:"General Functions",id:"general-functions",level:3},{value:"<code>router</code>",id:"router",level:3},{value:"<code>pausingManager</code>",id:"pausingmanager",level:3},{value:"<code>treasury</code>",id:"treasury",level:3},{value:"<code>getPendleYieldTokens</code>",id:"getpendleyieldtokens",level:3},{value:"<code>getForgeAddress</code>",id:"getforgeaddress",level:3},{value:"<code>isValidXYT</code>",id:"isvalidxyt",level:3},{value:"<code>isValidOT</code>",id:"isvalidot",level:3},{value:"<code>validForgeFactoryPair</code>",id:"validforgefactorypair",level:3},{value:"<code>otTokens</code>",id:"ottokens",level:3},{value:"<code>xytTokens</code>",id:"xyttokens",level:3},{value:"<code>isMarket</code>",id:"ismarket",level:3},{value:"<code>isXyt</code>",id:"isxyt",level:3},{value:"<code>allMarketsLength</code>",id:"allmarketslength",level:3},{value:"<code>forgeFee</code>",id:"forgefee",level:3},{value:"<code>interestUpdateRateDeltaForMarket</code>",id:"interestupdateratedeltaformarket",level:3},{value:"<code>expiryDivisor</code>",id:"expirydivisor",level:3},{value:"<code>lockNumerator</code>",id:"locknumerator",level:3},{value:"<code>lockDenominator</code>",id:"lockdenominator",level:3},{value:"<code>swapFee</code>",id:"swapfee",level:3},{value:"<code>protocolSwapFee</code>",id:"protocolswapfee",level:3},{value:"<code>curveShiftBlockDelta</code>",id:"curveshiftblockdelta",level:3},{value:"<code>getMarketByIndex</code>",id:"getmarketbyindex",level:3},{value:"<code>getMarket</code>",id:"getmarket",level:3},{value:"<code>getMarketFactoryAddress</code>",id:"getmarketfactoryaddress",level:3},{value:"<code>getMarketFromKey</code>",id:"getmarketfromkey",level:3}],c={toc:s};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"ipendledata"},"IPendleData"),(0,l.kt)("p",null,"imports IPendleRouter, IPendleYieldToken, IPendlePausingManager, IPendleMarket"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Source"),": ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-core/blob/master/contracts/interfaces/IPendleData.sol"},"IPendleData.sol")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"reference"},"REFERENCE"),(0,l.kt)("h3",{id:"events"},"Events"),(0,l.kt)("h3",{id:"forgefactoryvalidityset"},(0,l.kt)("inlineCode",{parentName:"h3"},"ForgeFactoryValiditySet")),(0,l.kt)("p",null,"Emitted when validity of a forge-factory pair is updated."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ForgeFactoryValiditySet(\n  bytes32 forgeId,\n  bytes32 marketFactoryId,\n  bool valid\n);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Forge ID in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Market factory ID in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"valid")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Flag setting whether the Forge factory is valid or not.")))),(0,l.kt)("p",null,"Signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"0x9153d773f9bc4eb73e257d5a608cd7be93c422bed8aec9121f9bf9ab9a18b46f")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"treasuryset"},(0,l.kt)("inlineCode",{parentName:"h3"},"TreasurySet")),(0,l.kt)("p",null,"Emitted when Treasury address has been set."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event TreasurySet(address treasury);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"treasury")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The treasury address.")))),(0,l.kt)("p",null,"Signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"0x3c864541ef71378c6229510ed90f376565ee42d9c5e0904a984a9e863e6db44f")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"lockparamsset"},(0,l.kt)("inlineCode",{parentName:"h3"},"LockParamsSet")),(0,l.kt)("p",null,"Emitted when LockParams is set."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event LockParamsSet(uint256 lockNumerator, uint256 lockDenominator);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"lockNumerator")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Numerator of lock param.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"lockDenominator")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Denominator of lock param.")))),(0,l.kt)("p",null,"Signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"0xa598b4dbf59d90f6b4cad0a1397a48801765d3b3e2bbb144cb8fca53d0737a02")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"expirydivisorset"},(0,l.kt)("inlineCode",{parentName:"h3"},"ExpiryDivisorSet")),(0,l.kt)("p",null,"Emitted when ExpiryDivisor is set."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ExpiryDivisorSet(uint256 expiryDivisor);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"expiryDivisor")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Expiry divisor value.")))),(0,l.kt)("p",null,"Signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"0x90c17e2890a3d0c88fdb2b6383e9bf7f1a7b7c925325e2c810fb998c4f44ec06")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"forgefeeset"},(0,l.kt)("inlineCode",{parentName:"h3"},"ForgeFeeSet")),(0,l.kt)("p",null,"Emitted when forge fee is set."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ForgeFeeSet(uint256 forgeFee);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"forgeFee")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Forge fee value.")))),(0,l.kt)("p",null,"Signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"0x2ef1bce60d7bbfae6c837d0b8e2a628c96ba39aaa79bd1aecfc972313843b7b7")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"interestupdateratedeltaformarketset"},(0,l.kt)("inlineCode",{parentName:"h3"},"InterestUpdateRateDeltaForMarketSet")),(0,l.kt)("p",null,"Emitted when interestUpdateRateDeltaForMarket is set."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event InterestUpdateRateDeltaForMarketSet(uint256 interestUpdateRateDeltaForMarket);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"interestUpdateRateDeltaForMarket")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Interest update rate delta for market value.")))),(0,l.kt)("p",null,"Signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"0x65ec3e0128626032a413924458fc6b81e4c8c20bfcecd79df9a7822829929fff")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"marketfeesset"},(0,l.kt)("inlineCode",{parentName:"h3"},"MarketFeesSet")),(0,l.kt)("p",null,"Emitted when market fees are set."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event MarketFeesSet(uint256 swapFee, uint256 protocolSwapFee);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"swapFee")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Market swap fee percentage.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"protocolSwapFee")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Protocol swap fee percentage.")))),(0,l.kt)("p",null,"Signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"0xdc40a2ee81b25d18d01c581d3094089420126c71715b91c435d672a506aea7bb")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"curveshiftblockdeltaset"},(0,l.kt)("inlineCode",{parentName:"h3"},"CurveShiftBlockDeltaSet")),(0,l.kt)("p",null,"Emitted when the curve shift block delta is set."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event CurveShiftBlockDeltaSet(uint256 blockDelta);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"blockDelta")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Block delta value for curve shifting.")))),(0,l.kt)("p",null,"Signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"0x2e6187d5d52493f2d476b10975d0cce536900209dc8448ee5701ac80bc4c30dc")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"newmarketfactory"},(0,l.kt)("inlineCode",{parentName:"h3"},"NewMarketFactory")),(0,l.kt)("p",null,"Emitted when a new market factory is added."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event NewMarketFactory(bytes32 indexed marketFactoryId, address indexed marketFactoryAddress);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The market factory ID in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"marketFactoryAddress")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The market factory address.")))),(0,l.kt)("p",null,"Signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"0x1a525a612420d955b2801652ec888e9764e1ae41da65cc2561596d4618ccb539")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"forgeadded"},(0,l.kt)("inlineCode",{parentName:"h3"},"ForgeAdded")),(0,l.kt)("p",null,"Emitted when a new market factory is added."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ForgeAdded(bytes32 indexed forgeId, address indexed forgeAddress);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"forgeAddress")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The forge address.")))),(0,l.kt)("p",null,"Signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"0x69055c715401f521099c448934ded38665f743c00f6c38849feef24404adc8e5")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"general-functions"},"General Functions"),(0,l.kt)("h3",{id:"router"},(0,l.kt)("inlineCode",{parentName:"h3"},"router")),(0,l.kt)("p",null,"Gets a reference to the PendleRouter contract."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function router() external view returns (IPendleRouter);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nIPendleRouter \u2014 Returns the router contract reference."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"pausingmanager"},(0,l.kt)("inlineCode",{parentName:"h3"},"pausingManager")),(0,l.kt)("p",null,"Gets a reference to the PendlePausingManager contract."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function pausingManager() external view returns (IPendlePausingManager);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nIPendlePausingManager \u2014 Returns the pausing manager contract reference."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"treasury"},(0,l.kt)("inlineCode",{parentName:"h3"},"treasury")),(0,l.kt)("p",null,"Gets a reference to the treasury contract."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function treasury() external view returns (address);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nTreasury contract address."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"getpendleyieldtokens"},(0,l.kt)("inlineCode",{parentName:"h3"},"getPendleYieldTokens")),(0,l.kt)("p",null,"Gets the Pendle yield tokens given a forge ID, underlying yield token, and expiry."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getPendleYieldTokens(\n    bytes32 forgeId,\n    address underlyingYieldToken,\n    uint256 expiry\n) external view returns (IPendleYieldToken ot, IPendleYieldToken xyt);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"underlyingYieldToken")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The address of the underlying yield token.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"expiry")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The expiry of the yield contract in epoch time.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\not \u2014 Returns the OT contract reference.",(0,l.kt)("br",null),"\nxyt \u2014 Returns the YT contract reference."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"getforgeaddress"},(0,l.kt)("inlineCode",{parentName:"h3"},"getForgeAddress")),(0,l.kt)("p",null,"Gets the Forge address given a forge ID."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getForgeAddress(bytes32 forgeId) external view returns (address forgeAddress);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nforgeAddress \u2014 Returns the address of the forge."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"isvalidxyt"},(0,l.kt)("inlineCode",{parentName:"h3"},"isValidXYT")),(0,l.kt)("p",null,"Checks if the underlying asset has a valid corresponding YT."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function isValidXYT(\n    bytes32 forgeId,\n    address underlyingAsset,\n    uint256 expiry\n) external view returns (bool);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"underlyingAsset")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The address of the underlying asset.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"expiry")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The expiry of the yield contract in epoch time.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the underlying asset has a valid YT, otherwise ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"isvalidot"},(0,l.kt)("inlineCode",{parentName:"h3"},"isValidOT")),(0,l.kt)("p",null,"Checks if the underlying asset has a valid corresponding OT."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function isValidOT(\n    bytes32 forgeId,\n    address underlyingAsset,\n    uint256 expiry\n) external view returns (bool);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"underlyingAsset")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The address of the underlying asset.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"expiry")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The expiry of the yield contract in epoch time.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the underlying asset has a valid OT, otherwise ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"validforgefactorypair"},(0,l.kt)("inlineCode",{parentName:"h3"},"validForgeFactoryPair")),(0,l.kt)("p",null,"Checks if the Forge and Market Factory are a canonical pair in the network."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"}," function validForgeFactoryPair(bytes32 forgeId, bytes32 marketFactoryId)\n    external\n    view\n    returns (bool);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The market factory ID in bytes.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the pair is valid, otherwise ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"ottokens"},(0,l.kt)("inlineCode",{parentName:"h3"},"otTokens")),(0,l.kt)("p",null,"Gets a reference to a specific OT."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function otTokens(\n    bytes32 forgeId,\n    address underlyingYieldToken,\n    uint256 expiry\n) external view returns (IPendleYieldToken ot);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"underlyingYieldToken")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The address of the underlying yield token.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"expiry")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The expiry of the yield contract in epoch time.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\not - Returns the OT contract reference."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"xyttokens"},(0,l.kt)("inlineCode",{parentName:"h3"},"xytTokens")),(0,l.kt)("p",null,"Gets a reference to a specific YT."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function xytTokens(\n    bytes32 forgeId,\n    address underlyingYieldToken,\n    uint256 expiry\n) external view returns (IPendleYieldToken ot);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"underlyingYieldToken")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The address of the underlying yield token.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"expiry")),(0,l.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The expiry of the yield contract in epoch time.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nyt - Returns the YT contract reference."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"ismarket"},(0,l.kt)("inlineCode",{parentName:"h3"},"isMarket")),(0,l.kt)("p",null,"Des"),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function isMarket(address addr) external view returns (bool result);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"addr")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Address to check if Market.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\ndes"),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"isxyt"},(0,l.kt)("inlineCode",{parentName:"h3"},"isXyt")),(0,l.kt)("p",null,"Des"),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function isXyt(address _ddr) external view returns (bool result);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"addr")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Address to check if YT.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\ndes"),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"allmarketslength"},(0,l.kt)("inlineCode",{parentName:"h3"},"allMarketsLength")),(0,l.kt)("p",null,"Returns the number of markets currently existing."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function allMarketsLength() external view returns (uint256);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nMarket length"),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"forgefee"},(0,l.kt)("inlineCode",{parentName:"h3"},"forgeFee")),(0,l.kt)("p",null,"Returns the current forge fee when tokenizing yield bearing tokens."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function forgeFee() external view returns (uint256);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nForge fee"),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"interestupdateratedeltaformarket"},(0,l.kt)("inlineCode",{parentName:"h3"},"interestUpdateRateDeltaForMarket")),(0,l.kt)("p",null,"Returns the update rate delta for updateparamL."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function interestUpdateRateDeltaForMarket() external view returns (unt256);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nUpdate rate delta"),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"expirydivisor"},(0,l.kt)("inlineCode",{parentName:"h3"},"expiryDivisor")),(0,l.kt)("p",null,"Des"),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function expiryDivisor() external view returns (uint256);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nDes"),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"locknumerator"},(0,l.kt)("inlineCode",{parentName:"h3"},"lockNumerator")),(0,l.kt)("p",null,"Des"),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function lockNumerator() external view returns (uint256);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nDes"),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"lockdenominator"},(0,l.kt)("inlineCode",{parentName:"h3"},"lockDenominator")),(0,l.kt)("p",null,"Des"),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function lockDenominator() external view returns (uint256);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nDes"),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"swapfee"},(0,l.kt)("inlineCode",{parentName:"h3"},"swapFee")),(0,l.kt)("p",null,"Returns the swap fee when trading in the market."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function swapFee() external view returns (uint256);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nSwap fee"),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"protocolswapfee"},(0,l.kt)("inlineCode",{parentName:"h3"},"protocolSwapFee")),(0,l.kt)("p",null,"Returns the protocol swap fee when trading in the market."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function protocolSwapFee() external view returns (uint256);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nProtocol swap fee"),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"curveshiftblockdelta"},(0,l.kt)("inlineCode",{parentName:"h3"},"curveShiftBlockDelta")),(0,l.kt)("p",null,"Returns the number of delta blocks before executing a curve shift."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function curveShiftBlockDelta() external view returns (uint256);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nCurve shift delta blocks"),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"getmarketbyindex"},(0,l.kt)("inlineCode",{parentName:"h3"},"getMarketByIndex")),(0,l.kt)("p",null,"Returns the market address by passing its uint index."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getMarketByIndex(uint256 index) external view returns (address market);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nThe market address."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"getmarket"},(0,l.kt)("inlineCode",{parentName:"h3"},"getMarket")),(0,l.kt)("p",null,"Gets a market given a YT and an ERC20 token."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getMarket(\n    bytes32 marketFactoryId,\n    address xyt,\n    address token\n) external view returns (address market);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The market factory ID in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"xyt")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The address of the YT in the market.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"token")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The address of the token in the market.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nThe market address."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"getmarketfactoryaddress"},(0,l.kt)("inlineCode",{parentName:"h3"},"getMarketFactoryAddress")),(0,l.kt)("p",null,"Gets a market factory address given the identifier."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getMarketFactoryAddress(bytes32 marketFactoryId)\n    external\n    view\n    returns (address marketFactoryAddress);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The market factory ID in bytes.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nThe market factory address."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"getmarketfromkey"},(0,l.kt)("inlineCode",{parentName:"h3"},"getMarketFromKey")),(0,l.kt)("p",null,"Gets a market factory address given the params."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getMarketFromKey(\n    address xyt,\n    address token,\n    bytes32 marketFactoryId\n) external view returns (address market);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"xyt")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The address of the YT in the market.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"token")),(0,l.kt)("td",{parentName:"tr",align:"center"},"address"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The address of the token in the market.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,l.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:"center"},"The market factory ID in bytes.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:"),(0,l.kt)("br",null),"\nThe market address."))}m.isMDXComponent=!0}}]);