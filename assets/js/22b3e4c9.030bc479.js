"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[5992],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},d=Object.keys(e);for(a=0;a<d.length;a++)n=d[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(a=0;a<d.length;a++)n=d[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),k=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=k(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,d=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=k(n),c=r,u=s["".concat(o,".").concat(c)]||s[c]||p[c]||d;return n?a.createElement(u,i(i({ref:t},m),{},{components:n})):a.createElement(u,i({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var d=n.length,i=new Array(d);i[0]=s;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var k=2;k<d;k++)i[k]=n[k];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},9841:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return l},metadata:function(){return k},toc:function(){return p}});var a=n(3117),r=n(102),d=(n(7294),n(3905)),i=["components"],l={sidebar_position:1},o="IPendleRouter",k={unversionedId:"reference/contracts/IPendleRouter",id:"reference/contracts/IPendleRouter",title:"IPendleRouter",description:"imports IWETH, IPendleData, IPendleMarketFactory, PendleStructs",source:"@site/docs/reference/contracts/IPendleRouter.md",sourceDirName:"reference/contracts",slug:"/reference/contracts/IPendleRouter",permalink:"/docs/reference/contracts/IPendleRouter",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sidebarReference",previous:{title:"Reference",permalink:"/docs/reference/intro"},next:{title:"IPendleData",permalink:"/docs/reference/contracts/IPendleData"}},m={},p=[{value:"REFERENCE",id:"reference",level:2},{value:"Events",id:"events",level:3},{value:"<code>MarketCreated</code>",id:"marketcreated",level:3},{value:"<code>SwapEvent</code>",id:"swapevent",level:3},{value:"<code>Join</code>",id:"join",level:3},{value:"<code>Exit</code>",id:"exit",level:3},{value:"General Functions",id:"general-functions",level:3},{value:"<code>data</code>",id:"data",level:3},{value:"<code>weth</code>",id:"weth",level:3},{value:"Forge Functions",id:"forge-functions",level:3},{value:"<code>newYieldContracts</code>",id:"newyieldcontracts",level:3},{value:"<code>redeemAfterExpiry</code>",id:"redeemafterexpiry",level:3},{value:"<code>redeemDueInterests</code>",id:"redeemdueinterests",level:3},{value:"<code>redeemUnderlying</code>",id:"redeemunderlying",level:3},{value:"<code>renewYield</code>",id:"renewyield",level:3},{value:"<code>tokenizeYield</code>",id:"tokenizeyield",level:3},{value:"Market Functions",id:"market-functions",level:3},{value:"<code>addMarketLiquidityDual</code>",id:"addmarketliquiditydual",level:3},{value:"<code>addMarketLiquiditySingle</code>",id:"addmarketliquiditysingle",level:3},{value:"<code>removeMarketLiquidityDual</code>",id:"removemarketliquiditydual",level:3},{value:"<code>removeMarketLiquiditySingle</code>",id:"removemarketliquiditysingle",level:3},{value:"<code>createMarket</code>",id:"createmarket",level:3},{value:"<code>bootstrapMarket</code>",id:"bootstrapmarket",level:3},{value:"<code>swapExactIn</code>",id:"swapexactin",level:3},{value:"<code>swapExactOut</code>",id:"swapexactout",level:3},{value:"<code>redeemLpInterests</code>",id:"redeemlpinterests",level:3}],s={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,d.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"ipendlerouter"},"IPendleRouter"),(0,d.kt)("p",null,"imports IWETH, IPendleData, IPendleMarketFactory, PendleStructs"),(0,d.kt)("p",null,(0,d.kt)("em",{parentName:"p"},"Source"),": ",(0,d.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-core/blob/master/contracts/interfaces/IPendleRouter.sol"},"IPendleRouter.sol")),(0,d.kt)("hr",null),(0,d.kt)("h2",{id:"reference"},"REFERENCE"),(0,d.kt)("h3",{id:"events"},"Events"),(0,d.kt)("h3",{id:"marketcreated"},(0,d.kt)("inlineCode",{parentName:"h3"},"MarketCreated")),(0,d.kt)("p",null,"Emitted when a market for a future yield token and an ERC20 token is created."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"event MarketCreated(\n    bytes32 marketFactoryId,\n    address indexed xyt,\n    address indexed token,\n    address indexed market\n);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"Market factory ID in bytes")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"xyt")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the tokenized future yield token as the base asset.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"token")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of an ERC20 token as the quote asset.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"market")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the newly created market.")))),(0,d.kt)("p",null,"Signature: ",(0,d.kt)("inlineCode",{parentName:"p"},"0xb18af3690cc6a832c9b2e802aab7a21111f4cfca5c2e4fcf614f6ea55b405f4a")),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"swapevent"},(0,d.kt)("inlineCode",{parentName:"h3"},"SwapEvent")),(0,d.kt)("p",null,"Emitted when a swap happens on the market."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"event SwapEvent(\n    address indexed trader,\n    address inToken,\n    address outToken,\n    uint256 exactIn,\n    uint256 exactOut,\n    address market\n);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"trader")),(0,d.kt)("td",{parentName:"tr",align:"center"},"indexed address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of msg.sender.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"inToken")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The input token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"outToken")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The output token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"exactIn")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The exact amount being traded.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"exactOut")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The exact amount received.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"market")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The market address.")))),(0,d.kt)("p",null,"Signature: ",(0,d.kt)("inlineCode",{parentName:"p"},"0xf5fd10e802251a919c2bfd2cfc15e2526d3864c819e2b4dc346ca1ade0f51658")),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"join"},(0,d.kt)("inlineCode",{parentName:"h3"},"Join")),(0,d.kt)("p",null,"Emitted when user adds liquidity."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"event Join(\n    address indexed sender,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    address market,\n    uint256 exactOutLp\n);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"sender")),(0,d.kt)("td",{parentName:"tr",align:"center"},"indexed address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The user who added liquidity.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"token0Amount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The amount of token0 (xyt) provided by user.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"token1Amount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The amount of token1 provided by user.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"market")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The market address.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"exactOutLp")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The exact LP minted.")))),(0,d.kt)("p",null,"Signature: ",(0,d.kt)("inlineCode",{parentName:"p"},"0xe37fea01e65dea7d589abafc4bd0d5282a09ddce3e9ea971ed3399d776a1a296")),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"exit"},(0,d.kt)("inlineCode",{parentName:"h3"},"Exit")),(0,d.kt)("p",null,"Emitted when user removes liquidity."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"event Exit(\n    address indexed sender,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    address market,\n    uint256 exactInLp\n);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"sender")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The user who removed liquidity.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"token0Amount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The amount of token0 (xyt) returned to the user.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"token1Amount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The amount of token1 returned to the user.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"market")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The market address.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"exactOutLp")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The exact LP removed.")))),(0,d.kt)("p",null,"Signature: ",(0,d.kt)("inlineCode",{parentName:"p"},"0x3af46289ed754c6821a8849534b8412a33bcd8387cb986f39e7e9937fb251cde")),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"general-functions"},"General Functions"),(0,d.kt)("h3",{id:"data"},(0,d.kt)("inlineCode",{parentName:"h3"},"data")),(0,d.kt)("p",null,"Gets a reference to the PendleData contract."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function data() external view returns (IPendleData);\n")),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\nIPendleData \u2014 Returns the data contract reference."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"weth"},(0,d.kt)("inlineCode",{parentName:"h3"},"weth")),(0,d.kt)("p",null,"Gets a reference of the WETH9 token contract address."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function weth() external view returns (IWETH);\n")),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\nIWETH \u2014 WETH token reference."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"forge-functions"},"Forge Functions"),(0,d.kt)("h3",{id:"newyieldcontracts"},(0,d.kt)("inlineCode",{parentName:"h3"},"newYieldContracts")),(0,d.kt)("p",null,"Tokenizes the yield-bearing asset into YT and OT."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function newYieldContracts(\n    bytes32 forgeId,\n    address underlyingAsset,\n    uint256 expiry\n) external returns (address ot, address xyt);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"underlyingAsset")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the underlying token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"expiry")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The expiry of the yield contract in epoch time.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\not \u2014 address of the OT created.",(0,d.kt)("br",null),"\nxyt \u2014 address of the YT created."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"redeemafterexpiry"},(0,d.kt)("inlineCode",{parentName:"h3"},"redeemAfterExpiry")),(0,d.kt)("p",null,"Redeems the underlying asset after the yield contract expiry by burning OT and YT."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function redeemAfterExpiry(\n    bytes32 forgeId,\n    address underlyingAsset,\n    uint256 expiry\n) external returns (uint256 redeemedAmount);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"underlyingAsset")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the underlying token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"expiry")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The expiry of the yield contract in epoch time.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\nredeemedAmount \u2014 amount that was redeemed."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"redeemdueinterests"},(0,d.kt)("inlineCode",{parentName:"h3"},"redeemDueInterests")),(0,d.kt)("p",null,"Redeems the user's due interests earned from the yield protocols."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function redeemDueInterests(\n    bytes32 forgeId,\n    address underlyingAsset,\n    uint256 expiry,\n    address user\n) external returns (uint256 interests);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"underlyingAsset")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the underlying token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"expiry")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The expiry of the yield contract in epoch time.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"user")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the user.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\ninterests \u2014 amount of due interests that was redeemed."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"redeemunderlying"},(0,d.kt)("inlineCode",{parentName:"h3"},"redeemUnderlying")),(0,d.kt)("p",null,"Redeems the underlying asset by burning OT and YT."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function redeemUnderlying(\n    bytes32 forgeId,\n    address underlyingAsset,\n    uint256 expiry,\n    uint256 amountToRedeem\n) external returns (uint256 redeemedAmount);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"underlyingAsset")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the underlying token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"expiry")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The expiry of the yield contract in epoch time.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"amountToRedeem")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The amount of the underlying asset to redeem.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\nredeemedAmount \u2014 amount that was redeemed."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"renewyield"},(0,d.kt)("inlineCode",{parentName:"h3"},"renewYield")),(0,d.kt)("p",null,"Renews this yield contract by burning the old OT and YT, while mining new OT and YT without having to remove his underlying asset."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function renewYield(\n    bytes32 forgeId,\n    uint256 oldExpiry,\n    address underlyingAsset,\n    uint256 newExpiry,\n    uint256 renewalRate\n)\n    external\n    returns (\n        uint256 redeemedAmount,\n        uint256 amountRenewed,\n        address ot,\n        address xyt,\n        uint256 amountTokenMinted\n    );\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"oldExpiry")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The old expiry of the yield contract in epoch time.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"underlyingAsset")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the underlying token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"newExpiry")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The new expiry of the yield contract in epoch time.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"renewalRate")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The rate to be used for the new yield contract.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\nredeemedAmount \u2014 amount that was redeemed.",(0,d.kt)("br",null),"\namountRenewed \u2014 amount that was renewed.",(0,d.kt)("br",null),"\not \u2014 address of the new OT.",(0,d.kt)("br",null),"\nxyt \u2014 address of the new YT.",(0,d.kt)("br",null),"\namountTokenMinted \u2014 amount of LP tokens minted."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"tokenizeyield"},(0,d.kt)("inlineCode",{parentName:"h3"},"tokenizeYield")),(0,d.kt)("p",null,"Tokenize the underlying asset into OT and YT for a yield contract."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function tokenizeYield(\n    bytes32 forgeId,\n    address underlyingAsset,\n    uint256 expiry,\n    uint256 amountToTokenize,\n    address to\n)\n    external\n    returns (\n        address ot,\n        address xyt,\n        uint256 amountTokenMinted\n    );\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"forgeId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The forge ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"underlyingAsset")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the underlying token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"expiry")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The expiry of the yield contract in epoch time.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"amountToTokenize")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"Amount of underlying asset to tokenize.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"to")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address to send the OT and YT to.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\not \u2014 address of the new OT.",(0,d.kt)("br",null),"\nxyt \u2014 address of the new YT.",(0,d.kt)("br",null),"\namountTokenMinted \u2014 amount of LP tokens minted."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"market-functions"},"Market Functions"),(0,d.kt)("h3",{id:"addmarketliquiditydual"},(0,d.kt)("inlineCode",{parentName:"h3"},"addMarketLiquidityDual")),(0,d.kt)("p",null,"Add both YT and Token liquidity into the market."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function addMarketLiquidityDual(\n    bytes32 marketFactoryId,\n    address xyt,\n    address token,\n    uint256 desiredXytAmount,\n    uint256 desiredTokenAmount,\n    uint256 xytMinAmount,\n    uint256 tokenMinAmount\n)\n    external\n    payable\n    returns (\n        uint256 amountXytUsed,\n        uint256 amountTokenUsed,\n        uint256 lpOut\n    );\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The market factory ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"xyt")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the YT.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"token")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the quote token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"desiredXytAmount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"Amount of YT to add liquidity to the market.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"desiredTokenAmount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"Amount of quote tokens to add liquidity to the market.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"xytMinAmount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The minimum expected amount of YT to add liquidity to the market.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"tokenMinAmount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The minimum expected amount of quote tokens to add liquidity to the market.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\namountXytUsed \u2014 amount of YT liquidity added to the market.",(0,d.kt)("br",null),"\namountTokenUsed \u2014 amount of quote tokens liquidity added to the market.",(0,d.kt)("br",null),"\nlpOut \u2014 amount of LP tokens minted."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"addmarketliquiditysingle"},(0,d.kt)("inlineCode",{parentName:"h3"},"addMarketLiquiditySingle")),(0,d.kt)("p",null,"Add either YT or Token liquidity into the market."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function addMarketLiquiditySingle(\n    bytes32 marketFactoryId,\n    address xyt,\n    address token,\n    bool forXyt,\n    uint256 exactInAsset,\n    uint256 minOutLp\n) external payable returns (uint256 exactOutLp);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The market factory ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"xyt")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the YT.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"token")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the quote token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"forXyt")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bool"),(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"true")," if adding liquidity to YT, otherwise ",(0,d.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"exactInAsset")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"Amount of YT or quote tokens to add liquidity to the market.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"minOutLp")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The minimum amount of LP tokens to be minted.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\nexactOutLp \u2014 amount of LP tokens minted."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"removemarketliquiditydual"},(0,d.kt)("inlineCode",{parentName:"h3"},"removeMarketLiquidityDual")),(0,d.kt)("p",null,"Remove both YT and Token liquidity from the market."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function removeMarketLiquidityDual(\n    bytes32 marketFactoryId,\n    address xyt,\n    address token,\n    uint256 exactInLp,\n    uint256 minOutXyt,\n    uint256 minOutToken\n) external returns (uint256 exactOutXyt, uint256 exactOutToken);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The market factory ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"xyt")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the YT.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"token")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the quote token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"exactInLp")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The exact amount of LP tokens provided to redeem YT and quote tokens.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"minOutXyt")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The minimum expected amount of YT redeemed from the market.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"minOutToken")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The minimum expected amount of quote tokens redeemed from the market.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\nexactOutXyt \u2014 the exact amount of YT redeemed from the market.",(0,d.kt)("br",null),"\nexactOutToken \u2014 the exact amount of quote tokens redeemed from the market."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"removemarketliquiditysingle"},(0,d.kt)("inlineCode",{parentName:"h3"},"removeMarketLiquiditySingle")),(0,d.kt)("p",null,"Remove either YT or Token liquidity from the market."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function removeMarketLiquiditySingle(\n    bytes32 marketFactoryId,\n    address xyt,\n    address token,\n    bool forXyt,\n    uint256 exactInLp,\n    uint256 minOutAsset\n) external returns (uint256 exactOutXyt, uint256 exactOutToken);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The market factory ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"xyt")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the YT.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"token")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the quote token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"forXyt")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bool"),(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"true")," if removing liquidity to YT, otherwise ",(0,d.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"exactInLp")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"Amount of exact LP tokens used to redeem YT and quote tokens.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"minOutAsset")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The minimum amount of either YT ro quote tokens to be redeemed.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\nexactOutXyt \u2014 the exact amount of YT redeemed from the market.",(0,d.kt)("br",null),"\nexactOutToken \u2014 the exact amount of quote tokens redeemed from the market."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"createmarket"},(0,d.kt)("inlineCode",{parentName:"h3"},"createMarket")),(0,d.kt)("p",null,"Creates a market given a protocol ID, future yield token, and an ERC20 token."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function createMarket(\n    bytes32 marketFactoryId,\n    address xyt,\n    address token\n) external returns (address market);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The market factory ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"xyt")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the YT.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"token")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the quote token.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\nmarket \u2014 address of the newly created market."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"bootstrapmarket"},(0,d.kt)("inlineCode",{parentName:"h3"},"bootstrapMarket")),(0,d.kt)("p",null,"Bootstrap initial liquidity in the newly created market."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function bootstrapMarket(\n    bytes32 marketFactoryId,\n    address xyt,\n    address token,\n    uint256 initialXytLiquidity,\n    uint256 initialTokenLiquidity\n) external payable;\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The market factory ID in bytes.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"xyt")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the YT.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"token")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the quote token.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"initialXytLiquidity")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"Initial YT liquidity in the market.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"initialTokenLiquidity")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"Initial token liquidity in the market.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\not \u2014 address of the new OT.",(0,d.kt)("br",null),"\nxyt \u2014 address of the new YT.",(0,d.kt)("br",null),"\namountTokenMinted \u2014 amount of LP tokens minted."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"swapexactin"},(0,d.kt)("inlineCode",{parentName:"h3"},"swapExactIn")),(0,d.kt)("p",null,"Trades an exact amount of source assets into destination assets."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function swapExactIn(\n    address tokenIn,\n    address tokenOut,\n    uint256 inTotalAmount,\n    uint256 minOutTotalAmount,\n    bytes32 marketFactoryId\n) external payable returns (uint256 outTotalAmount);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"tokenIn")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the source asset to trade.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"tokenOut")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the destination asset to trade.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"inTotalAmount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The exact amount of source assets to trade.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"minOutTotalAmount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The minimum output amount resulting from the trade.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The market factory in bytes.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\noutTotalAmount \u2014 the total output amount resulting from the trade."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"swapexactout"},(0,d.kt)("inlineCode",{parentName:"h3"},"swapExactOut")),(0,d.kt)("p",null,"Tokenize the underlying asset into OT and YT for a yield contract."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function swapExactOut(\n    address tokenIn,\n    address tokenOut,\n    uint256 outTotalAmount,\n    uint256 maxInTotalAmount,\n    bytes32 marketFactoryId\n) external payable returns (uint256 inTotalAmount);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"tokenIn")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the source asset to trade.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"tokenOut")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the destination asset to trade.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"outTotalAmount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The exact amount of destination assets desired to use in the trade.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"maxInTotalAmount")),(0,d.kt)("td",{parentName:"tr",align:"center"},"uint256"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The maximum input amount allowed to use in the trade.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"marketFactoryId")),(0,d.kt)("td",{parentName:"tr",align:"center"},"bytes32"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The market factory in bytes.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\ninTotalAmount \u2014 the total input amount used in the trade."),(0,d.kt)("br",null),(0,d.kt)("h3",{id:"redeemlpinterests"},(0,d.kt)("inlineCode",{parentName:"h3"},"redeemLpInterests")),(0,d.kt)("p",null,"Redeem the LP interests generated from the market LP tokens."),(0,d.kt)("hr",null),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-solidity"},"function redeemLpInterests(address market, address user) external returns (uint256 interests);\n")),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,d.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"market")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the market.")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"user")),(0,d.kt)("td",{parentName:"tr",align:"center"},"address"),(0,d.kt)("td",{parentName:"tr",align:"center"},"The address of the user.")))),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Returns:"),(0,d.kt)("br",null),"\ninterests \u2014 amount of interests redeemed."))}c.isMDXComponent=!0}}]);